// Generated by CoffeeScript 1.6.2
var SIMLCompiler, fs, mkdirp, siml, sysPath, write;

fs = require('fs');

siml = require('siml');

sysPath = require('path');

mkdirp = require('mkdirp');

write = function(path, content, append) {
  var dir;

  if (append == null) {
    append = false;
  }
  if (content == null) {
    return;
  }
  dir = sysPath.dirname(sysPath.normalize(path));
  return mkdirp(dir, '0775', function(err) {
    if (err != null) {
      throw err;
    }
    if (append != null) {
      return fs.appendFile(path, content, function(err) {
        if (err != null) {
          throw err;
        }
      });
    } else {
      return fs.writeFile(path, content, function(err) {
        if (err != null) {
          throw err;
        }
      });
    }
  });
};

module.exports = SIMLCompiler = (function() {
  SIMLCompiler.prototype.brunchPlugin = true;

  SIMLCompiler.prototype.type = 'template';

  SIMLCompiler.prototype.extension = 'siml';

  function SIMLCompiler(config) {
    var _ref, _ref1, _ref2, _ref3, _ref4, _ref5;

    this["public"] = config.paths["public"];
    this.outFile = (Object.keys(config.files.templates.joinTo))[0] || "templates.js";
    this.rootDir = config.files.templates.joinTo[this.outFile];
    this.createRouter = !!((_ref = config.plugins) != null ? (_ref1 = _ref.siml) != null ? _ref1.createRouter : void 0 : void 0);
    this.routerOptions = (_ref2 = config.plugins) != null ? (_ref3 = _ref2.siml) != null ? _ref3.routerOptions : void 0 : void 0;
    this.templateModuleName = ((_ref4 = config.plugins) != null ? (_ref5 = _ref4.siml) != null ? _ref5.moduleName : void 0 : void 0) || 'templates';
  }

  SIMLCompiler.prototype.compile = function(data, path, callback) {
    var content, e, error;

    try {
      return content = siml.angular.parse(data, {
        pretty: false
      });
    } catch (_error) {
      e = _error;
      error = "Error: " + e.message;
      if (e.type) {
        error = e.type + error;
      }
      if (e.filename) {
        return error += " in '" + e.filename + ":" + e.line + ":" + e.column + "'";
      }
    } finally {
      callback(error, '');
    }
  };

  SIMLCompiler.prototype.onCompile = function(compiled) {
    var router_module, template_module, templates;

    templates = this.getTemplates(compiled);
    router_module = this.createRouter ? this.getRouterModule(templates) || '' : '';
    template_module = this.getTemplateModule(templates);
    return write("" + this["public"] + sysPath.sep + this.outFile, "" + template_module + "\n" + router_module, true);
  };

  SIMLCompiler.prototype.getTemplates = function(compiled) {
    var content, data, file, files, name, path, path_hunks, result, templates, _i, _len;

    templates = [];
    files = ((function() {
      var _i, _len, _results;

      _results = [];
      for (_i = 0, _len = compiled.length; _i < _len; _i++) {
        result = compiled[_i];
        if (result.path === ("" + this["public"] + sysPath.sep + this.outFile)) {
          _results.push(result.sourceFiles);
        }
      }
      return _results;
    }).call(this))[0];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      if (!(file.compilerName === 'SIMLCompiler')) {
        continue;
      }
      path = file.path.replace(this.rootDir, '');
      path_hunks = path.split(sysPath.sep);
      name = path_hunks.pop().slice(0, -this.extension.length - 1);
      path_hunks.push(name + '.html');
      data = fs.readFileSync(file.path, 'utf8');
      content = siml.angular.parse(data, {
        pretty: false
      });
      templates.push({
        name: name,
        content: content,
        path: sysPath.join.apply(this, path_hunks)
      });
    }
    return templates;
  };

  SIMLCompiler.prototype.getTemplateModule = function(templates) {
    var content, escaped_content, template, _i, _len;

    content = '';
    for (_i = 0, _len = templates.length; _i < _len; _i++) {
      template = templates[_i];
      escaped_content = template.content.replace(/'/g, "\\'");
      content += "\n    $templateCache.put('" + template.path + "', '" + escaped_content + "');";
    }
    return "angular.module('" + this.templateModuleName + "', [])\n  .run(['$templateCache', function($templateCache) {\n    " + content + "\n  }])";
  };

  SIMLCompiler.prototype.getRouterModule = function(templates) {
    var content, controller_name, route_name, template, _i, _len;

    content = '';
    for (_i = 0, _len = templates.length; _i < _len; _i++) {
      template = templates[_i];
      if (!((this.routerOptions.onlyUse != null) && template.path.indexOf(this.routerOptions.onlyUse) === 0)) {
        continue;
      }
      route_name = template.path.slice(template.path.indexOf(sysPath.sep, 1)).slice(0, -5);
      controller_name = template.name[0].toUpperCase() + template.name.slice(1);
      content += "\n    $routeProvider.when('" + route_name + "', { controller: '" + controller_name + "', templateUrl: '" + template.path + "' });";
    }
    if (this.routerOptions.defaultRoute != null) {
      content += "\n    $routeProvider.otherwise({ redirectTo: '" + this.routerOptions.defaultRoute + "' });";
    }
    return "angular.module('" + (this.routerOptions.moduleName || 'router') + "', [])\n  .config(['$routeProvider', function($routeProvider) {\n    " + content + "\n  }])";
  };

  return SIMLCompiler;

})();
